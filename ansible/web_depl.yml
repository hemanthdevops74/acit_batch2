- name : Deploy a web application
  hosts: db_and_webserver1
  tasks:

      - name: Install NTP
        apt: name={{ item }} state=present
        with_items:
          - ntp
        become: yes

      - name: Install Web server
        apt: name={{ item }} state=present
        with_items:
          - python
          - python-setuptools
          - python-dev
          - build-essential 
          - python-pip 
          - python-mysqldb
        become: yes
        
      
      - name: Install Mysql DB servers
        apt: name="{{ item }}" state=present
        with_items:
          - mysql-server
          - mysql-client
        become: yes 
          

      - name: "Start DB Sevice"
        service:
          name: mysql
          state: started  
          enabled: yes    
        become: yes
        # become_user: root
      # - name: "Start DB Sevice"
      #   shell: service mysql start
      #   become: yes
   
    
      - name: Create DB User
        mysql_user:
            name: hemanth # required. name of the user (role) to add or remove
            state: present # not required. choices: present;absent. Whether the user should exist.  When C(absent), removes the user.
            password: Passw0rd1 # not required. set the user's password.
            connect_timeout: 30 # not required. The connection timeout when connecting to the MySQL server.
            login_unix_socket: /var/run/mysqld/mysqld.sock
            priv: '*.*:ALL'
            host: '%'
        become: yes
        # become_user: root
        
      

      - name: "Create DB"
        mysql_db:
            login_user: hemanth # not required. The username used to authenticate with.
            login_password: Passw0rd1
            # password : Passw0rd # not required. The password used to authenticate with.
            name: employee_db # required. name of the database to add or remove,name=all May only be provided if I(state) is C(dump) or C(import).,if name=all Works like --all-databases option for mysqldump (Added in 2.0)
            state: present # not required. choices: present;absent;dump;import. The database state
            login_unix_socket: /var/run/mysqld/mysqld.sock


      - name: Install Flask Dependencies
        pip: name="{{item}}"
        with_items:
          - flask
          - flask-mysql
        become: yes

      - name: copy source code
        copy:
            dest: /opt/app.py # required. Remote absolute path where the file should be copied to. If I(src) is a directory, this must be a directory too. If I(dest) is a nonexistent path and if either I(dest) ends with "/" or I(src) is a directory, I(dest) is created. If I(src) and I(dest) are files, the parent directory of I(dest) isn't created: the task fails if it doesn't already exist.
            src: app.py # not required. Local path to a file to copy to the remote server; can be absolute or relative. If path is a directory, it is copied recursively. In this case, if path ends with "/", only inside contents of that directory are copied to destination. Otherwise, if it does not end with "/", the directory itself with all contents is copied. This behavior is similar to Rsync.
        become: yes
        
      - name: start webserver
        shell: FLASK_APP=app.py nohup flask run --host=0.0.0.0 &
